{"ast":null,"code":"export default (async (req, res) => {\n  const email = req.body.emailAddress;\n\n  try {\n    const response = await fetch(\"https://us17.api.mailchimp.com/3.0/lists/a3160a904b/members\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email_address: email,\n        status: \"subscribed\"\n      })\n    });\n\n    if (response.status === 200) {\n      res.statusCode = 200;\n      res.end();\n    } else {\n      res.statusCode = 400;\n      res.end();\n    }\n  } catch {}\n}); // export default async (req, res) => {\n//   // 1. Destructure the email address from the request body.\n//   const { email } = req.body;\n//   if (!email) {\n//     // 2. Throw an error if an email wasn't provided.\n//     return res.status(400).json({ error: \"Email is required\" });\n//   }\n//   try {\n//     // 3. Fetch the environment variables.\n//     const LIST_ID = \"a3160a904b\";\n//     const API_KEY = \"cac217a0987980264d853d249f6eb883-us17\";\n//     const DATACENTER = \"us17\";\n//     // 5. The status of 'subscribed' is equivalent to a double opt-in.\n//     const data = {\n//       email_address: email,\n//       status: \"subscribed\",\n//     };\n//     // 6. Send a POST request to Mailchimp.\n//     const response = await fetch(\n//       `https://${DATACENTER}.api.mailchimp.com/3.0/lists/${LIST_ID}/members`,\n//       {\n//         body: JSON.stringify(data),\n//         headers: {\n//           Authorization: `apikey ${API_KEY}`,\n//           \"Content-Type\": \"application/json\",\n//         },\n//         method: \"POST\",\n//       }\n//     );\n//     // 7. Swallow any errors from Mailchimp and return a better error message.\n//     if (response.status >= 400) {\n//       return res.status(400).json({\n//         error: `There was an error subscribing to the newsletter. Shoot me an email at isojos@icloud.com and I'll add you to the list.`,\n//       });\n//     }\n//     // 8. If we made it this far, it was a success! ðŸŽ‰\n//     return res.status(201).json({ error: \"\" });\n//   } catch (error) {\n//     return res.status(500).json({ error: error.message || error.toString() });\n//   }\n// };","map":{"version":3,"sources":["/Users/tiffanybouchard/Desktop/workspace/ojos/web/pages/api/subscribe.js"],"names":["req","res","email","body","emailAddress","response","fetch","method","headers","JSON","stringify","email_address","status","statusCode","end"],"mappings":"AAAA,gBAAe,OAAOA,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAMC,KAAK,GAAGF,GAAG,CAACG,IAAJ,CAASC,YAAvB;;AAEA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,6DAD0B,EAE1B;AACEC,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFX;AAKEL,MAAAA,IAAI,EAAEM,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,aAAa,EAAET,KADI;AAEnBU,QAAAA,MAAM,EAAE;AAFW,OAAf;AALR,KAF0B,CAA5B;;AAcA,QAAIP,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AAC3BX,MAAAA,GAAG,CAACY,UAAJ,GAAiB,GAAjB;AACAZ,MAAAA,GAAG,CAACa,GAAJ;AACD,KAHD,MAGO;AACLb,MAAAA,GAAG,CAACY,UAAJ,GAAiB,GAAjB;AACAZ,MAAAA,GAAG,CAACa,GAAJ;AACD;AACF,GAtBD,CAsBE,MAAM,CAAE;AACX,CA1BD,E,CA4BA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["export default async (req, res) => {\n  const email = req.body.emailAddress;\n\n  try {\n    const response = await fetch(\n      \"https://us17.api.mailchimp.com/3.0/lists/a3160a904b/members\",\n      {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          email_address: email,\n          status: \"subscribed\",\n        }),\n      }\n    );\n\n    if (response.status === 200) {\n      res.statusCode = 200;\n      res.end();\n    } else {\n      res.statusCode = 400;\n      res.end();\n    }\n  } catch {}\n};\n\n// export default async (req, res) => {\n//   // 1. Destructure the email address from the request body.\n//   const { email } = req.body;\n\n//   if (!email) {\n//     // 2. Throw an error if an email wasn't provided.\n//     return res.status(400).json({ error: \"Email is required\" });\n//   }\n\n//   try {\n//     // 3. Fetch the environment variables.\n//     const LIST_ID = \"a3160a904b\";\n//     const API_KEY = \"cac217a0987980264d853d249f6eb883-us17\";\n//     const DATACENTER = \"us17\";\n\n//     // 5. The status of 'subscribed' is equivalent to a double opt-in.\n//     const data = {\n//       email_address: email,\n//       status: \"subscribed\",\n//     };\n\n//     // 6. Send a POST request to Mailchimp.\n//     const response = await fetch(\n//       `https://${DATACENTER}.api.mailchimp.com/3.0/lists/${LIST_ID}/members`,\n//       {\n//         body: JSON.stringify(data),\n//         headers: {\n//           Authorization: `apikey ${API_KEY}`,\n//           \"Content-Type\": \"application/json\",\n//         },\n//         method: \"POST\",\n//       }\n//     );\n\n//     // 7. Swallow any errors from Mailchimp and return a better error message.\n//     if (response.status >= 400) {\n//       return res.status(400).json({\n//         error: `There was an error subscribing to the newsletter. Shoot me an email at isojos@icloud.com and I'll add you to the list.`,\n//       });\n//     }\n\n//     // 8. If we made it this far, it was a success! ðŸŽ‰\n//     return res.status(201).json({ error: \"\" });\n//   } catch (error) {\n//     return res.status(500).json({ error: error.message || error.toString() });\n//   }\n// };\n"]},"metadata":{},"sourceType":"module"}