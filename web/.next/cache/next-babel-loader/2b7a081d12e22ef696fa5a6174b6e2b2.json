{"ast":null,"code":"import mailchimp from \"@mailchimp/mailchimp_marketing\";\nmailchimp.setConfig({\n  apiKey: \"cac217a0987980264d853d249f6eb883-us17\",\n  server: \"us17\"\n});\n\nasync function run() {\n  const response = await mailchimp.ping.get();\n  console.log(response);\n}\n\nrun(); // export default async (req, res) => {\n//   // 1. Destructure the email address from the request body.\n//   const { email } = req.body;\n//   if (!email) {\n//     // 2. Throw an error if an email wasn't provided.\n//     return res.status(400).json({ error: \"Email is required\" });\n//   }\n//   try {\n//     // 3. Fetch the environment variables.\n//     const LIST_ID = \"a3160a904b\";\n//     const API_KEY = \"cac217a0987980264d853d249f6eb883-us17\";\n//     const DATACENTER = \"us17\";\n//     // 5. The status of 'subscribed' is equivalent to a double opt-in.\n//     const data = {\n//       email_address: email,\n//       status: \"subscribed\",\n//     };\n//     // 6. Send a POST request to Mailchimp.\n//     const response = await fetch(\n//       `https://${DATACENTER}.api.mailchimp.com/3.0/lists/${LIST_ID}/members`,\n//       {\n//         body: JSON.stringify(data),\n//         headers: {\n//           Authorization: `apikey ${API_KEY}`,\n//           \"Content-Type\": \"application/json\",\n//         },\n//         method: \"POST\",\n//       }\n//     );\n//     // 7. Swallow any errors from Mailchimp and return a better error message.\n//     if (response.status >= 400) {\n//       return res.status(400).json({\n//         error: `There was an error subscribing to the newsletter. Shoot me an email at isojos@icloud.com and I'll add you to the list.`,\n//       });\n//     }\n//     // 8. If we made it this far, it was a success! ðŸŽ‰\n//     return res.status(201).json({ error: \"\" });\n//   } catch (error) {\n//     return res.status(500).json({ error: error.message || error.toString() });\n//   }\n// };","map":{"version":3,"sources":["/Users/tiffanybouchard/Desktop/workspace/ojos/web/pages/api/subscribe.js"],"names":["mailchimp","setConfig","apiKey","server","run","response","ping","get","console","log"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,gCAAtB;AAEAA,SAAS,CAACC,SAAV,CAAoB;AAClBC,EAAAA,MAAM,EAAE,uCADU;AAElBC,EAAAA,MAAM,EAAE;AAFU,CAApB;;AAKA,eAAeC,GAAf,GAAqB;AACnB,QAAMC,QAAQ,GAAG,MAAML,SAAS,CAACM,IAAV,CAAeC,GAAf,EAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACD;;AAEDD,GAAG,G,CAEH;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import mailchimp from \"@mailchimp/mailchimp_marketing\";\n\nmailchimp.setConfig({\n  apiKey: \"cac217a0987980264d853d249f6eb883-us17\",\n  server: \"us17\",\n});\n\nasync function run() {\n  const response = await mailchimp.ping.get();\n  console.log(response);\n}\n\nrun();\n\n// export default async (req, res) => {\n//   // 1. Destructure the email address from the request body.\n//   const { email } = req.body;\n\n//   if (!email) {\n//     // 2. Throw an error if an email wasn't provided.\n//     return res.status(400).json({ error: \"Email is required\" });\n//   }\n\n//   try {\n//     // 3. Fetch the environment variables.\n//     const LIST_ID = \"a3160a904b\";\n//     const API_KEY = \"cac217a0987980264d853d249f6eb883-us17\";\n//     const DATACENTER = \"us17\";\n\n//     // 5. The status of 'subscribed' is equivalent to a double opt-in.\n//     const data = {\n//       email_address: email,\n//       status: \"subscribed\",\n//     };\n\n//     // 6. Send a POST request to Mailchimp.\n//     const response = await fetch(\n//       `https://${DATACENTER}.api.mailchimp.com/3.0/lists/${LIST_ID}/members`,\n//       {\n//         body: JSON.stringify(data),\n//         headers: {\n//           Authorization: `apikey ${API_KEY}`,\n//           \"Content-Type\": \"application/json\",\n//         },\n//         method: \"POST\",\n//       }\n//     );\n\n//     // 7. Swallow any errors from Mailchimp and return a better error message.\n//     if (response.status >= 400) {\n//       return res.status(400).json({\n//         error: `There was an error subscribing to the newsletter. Shoot me an email at isojos@icloud.com and I'll add you to the list.`,\n//       });\n//     }\n\n//     // 8. If we made it this far, it was a success! ðŸŽ‰\n//     return res.status(201).json({ error: \"\" });\n//   } catch (error) {\n//     return res.status(500).json({ error: error.message || error.toString() });\n//   }\n// };\n"]},"metadata":{},"sourceType":"module"}